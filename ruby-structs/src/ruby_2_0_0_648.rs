/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type size_t = usize;
pub type __clockid_t = ::std::os::raw::c_int;
pub type clockid_t = __clockid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [usize; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    fn test_field___val() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__sigset_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__sigset_t),
                "::",
                stringify!(__val)
            )
        );
    }
    test_field___val();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    fn test_field___prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__prev)
            )
        );
    }
    test_field___prev();
    fn test_field___next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_internal_list>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_internal_list),
                "::",
                stringify!(__next)
            )
        );
    }
    test_field___next();
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    fn test_field___lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__lock)
            )
        );
    }
    test_field___lock();
    fn test_field___count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__count)
            )
        );
    }
    test_field___count();
    fn test_field___owner() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__owner)
            )
        );
    }
    test_field___owner();
    fn test_field___nusers() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__nusers)
            )
        );
    }
    test_field___nusers();
    fn test_field___kind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__kind)
            )
        );
    }
    test_field___kind();
    fn test_field___spins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__spins)
            )
        );
    }
    test_field___spins();
    fn test_field___elision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize
            },
            22usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__elision)
            )
        );
    }
    test_field___elision();
    fn test_field___list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_mutex_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_mutex_s),
                "::",
                stringify!(__list)
            )
        );
    }
    test_field___list();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field___low() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
    }
    test_field___low();
    fn test_field___high() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    test_field___high();
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    fn test_field___wseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq)
            )
        );
    }
    test_field___wseq();
    fn test_field___wseq32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wseq32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_1),
                "::",
                stringify!(__wseq32)
            )
        );
    }
    test_field___wseq32();
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    fn test_field___low() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__low)
            )
        );
    }
    test_field___low();
    fn test_field___high() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>::uninit(
                    );
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
                "::",
                stringify!(__high)
            )
        );
    }
    test_field___high();
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    fn test_field___g1_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start)
            )
        );
    }
    test_field___g1_start();
    fn test_field___g1_start32() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_start32) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s__bindgen_ty_2),
                "::",
                stringify!(__g1_start32)
            )
        );
    }
    test_field___g1_start32();
}
impl ::std::fmt::Debug for __pthread_cond_s__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "__pthread_cond_s__bindgen_ty_2 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    fn test_field___g_refs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_refs)
            )
        );
    }
    test_field___g_refs();
    fn test_field___g_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_size)
            )
        );
    }
    test_field___g_size();
    fn test_field___g1_orig_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g1_orig_size)
            )
        );
    }
    test_field___g1_orig_size();
    fn test_field___wrefs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__wrefs)
            )
        );
    }
    test_field___wrefs();
    fn test_field___g_signals() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__pthread_cond_s>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(__pthread_cond_s),
                "::",
                stringify!(__g_signals)
            )
        );
    }
    test_field___g_signals();
}
impl ::std::fmt::Debug for __pthread_cond_s {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "__pthread_cond_s {{ __bindgen_anon_1: {:?}, __bindgen_anon_2: {:?}, __g_refs: {:?}, __g_size: {:?}, __g1_orig_size: {:?}, __wrefs: {:?}, __g_signals: {:?} }}" , self . __bindgen_anon_1 , self . __bindgen_anon_2 , self . __g_refs , self . __g_size , self . __g1_orig_size , self . __wrefs , self . __g_signals)
    }
}
pub type pthread_t = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_mutex_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_mutex_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
impl ::std::fmt::Debug for pthread_mutex_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_mutex_t {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    fn test_field___data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__data)
            )
        );
    }
    test_field___data();
    fn test_field___size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__size)
            )
        );
    }
    test_field___size();
    fn test_field___align() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<pthread_cond_t>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(pthread_cond_t),
                "::",
                stringify!(__align)
            )
        );
    }
    test_field___align();
}
impl ::std::fmt::Debug for pthread_cond_t {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "pthread_cond_t {{ union }}")
    }
}
pub type VALUE = usize;
pub type ID = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RBasic {
    pub flags: VALUE,
    pub klass: VALUE,
}
#[test]
fn bindgen_test_layout_RBasic() {
    assert_eq!(
        ::std::mem::size_of::<RBasic>(),
        16usize,
        concat!("Size of: ", stringify!(RBasic))
    );
    assert_eq!(
        ::std::mem::align_of::<RBasic>(),
        8usize,
        concat!("Alignment of ", stringify!(RBasic))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RBasic>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RBasic),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RBasic>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RBasic),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString {
    pub basic: RBasic,
    pub as_: RString__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1 {
    pub heap: RString__bindgen_ty_1__bindgen_ty_1,
    pub ary: [::std::os::raw::c_char; 24usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RString__bindgen_ty_1__bindgen_ty_1 {
    pub len: ::std::os::raw::c_long,
    pub ptr: *mut ::std::os::raw::c_char,
    pub aux: RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared: VALUE,
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capa) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(capa)
            )
        );
    }
    test_field_capa();
    fn test_field_shared() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(shared)
            )
        );
    }
    test_field_shared();
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RString__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RString__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RString__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
    fn test_field_aux() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RString__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(aux)
            )
        );
    }
    test_field_aux();
}
impl ::std::fmt::Debug for RString__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString__bindgen_ty_1__bindgen_ty_1 {{ len: {:?}, ptr: {:?}, aux: {:?} }}",
            self.len, self.ptr, self.aux
        )
    }
}
#[test]
fn bindgen_test_layout_RString__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RString__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RString__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RString__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RString__bindgen_ty_1))
    );
    fn test_field_heap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1),
                "::",
                stringify!(heap)
            )
        );
    }
    test_field_heap();
    fn test_field_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RString__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ary) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString__bindgen_ty_1),
                "::",
                stringify!(ary)
            )
        );
    }
    test_field_ary();
}
impl ::std::fmt::Debug for RString__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RString__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RString() {
    assert_eq!(
        ::std::mem::size_of::<RString>(),
        40usize,
        concat!("Size of: ", stringify!(RString))
    );
    assert_eq!(
        ::std::mem::align_of::<RString>(),
        8usize,
        concat!("Alignment of ", stringify!(RString))
    );
    fn test_field_basic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RString>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).basic) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RString),
                "::",
                stringify!(basic)
            )
        );
    }
    test_field_basic();
    fn test_field_as() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RString>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RString),
                "::",
                stringify!(as_)
            )
        );
    }
    test_field_as();
}
impl ::std::fmt::Debug for RString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RString {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray {
    pub basic: RBasic,
    pub as_: RArray__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1 {
    pub heap: RArray__bindgen_ty_1__bindgen_ty_1,
    pub ary: [VALUE; 3usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RArray__bindgen_ty_1__bindgen_ty_1 {
    pub len: ::std::os::raw::c_long,
    pub aux: RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
    pub ptr: *mut VALUE,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    pub capa: ::std::os::raw::c_long,
    pub shared: VALUE,
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_capa() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).capa) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(capa)
            )
        );
    }
    test_field_capa();
    fn test_field_shared() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<
                    RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1,
                >::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shared) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(shared)
            )
        );
    }
    test_field_shared();
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(RArray__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_len() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RArray__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(len)
            )
        );
    }
    test_field_len();
    fn test_field_aux() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RArray__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(aux)
            )
        );
    }
    test_field_aux();
    fn test_field_ptr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<RArray__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ptr) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(ptr)
            )
        );
    }
    test_field_ptr();
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray__bindgen_ty_1__bindgen_ty_1 {{ len: {:?}, aux: {:?}, ptr: {:?} }}",
            self.len, self.aux, self.ptr
        )
    }
}
#[test]
fn bindgen_test_layout_RArray__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RArray__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(RArray__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray__bindgen_ty_1))
    );
    fn test_field_heap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RArray__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).heap) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1),
                "::",
                stringify!(heap)
            )
        );
    }
    test_field_heap();
    fn test_field_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RArray__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ary) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray__bindgen_ty_1),
                "::",
                stringify!(ary)
            )
        );
    }
    test_field_ary();
}
impl ::std::fmt::Debug for RArray__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RArray__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RArray() {
    assert_eq!(
        ::std::mem::size_of::<RArray>(),
        40usize,
        concat!("Size of: ", stringify!(RArray))
    );
    assert_eq!(
        ::std::mem::align_of::<RArray>(),
        8usize,
        concat!("Alignment of ", stringify!(RArray))
    );
    fn test_field_basic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).basic) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray),
                "::",
                stringify!(basic)
            )
        );
    }
    test_field_basic();
    fn test_field_as() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RArray>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(RArray),
                "::",
                stringify!(as_)
            )
        );
    }
    test_field_as();
}
impl ::std::fmt::Debug for RArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RArray {{ basic: {:?}, as: {:?} }}",
            self.basic, self.as_
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_global_variable {
    _unused: [u8; 0],
}
pub type st_data_t = usize;
pub type st_index_t = st_data_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_hash_type {
    pub compare: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub hash: ::std::option::Option<unsafe extern "C" fn() -> st_index_t>,
}
#[test]
fn bindgen_test_layout_st_hash_type() {
    assert_eq!(
        ::std::mem::size_of::<st_hash_type>(),
        16usize,
        concat!("Size of: ", stringify!(st_hash_type))
    );
    assert_eq!(
        ::std::mem::align_of::<st_hash_type>(),
        8usize,
        concat!("Alignment of ", stringify!(st_hash_type))
    );
    fn test_field_compare() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_hash_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compare) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_hash_type),
                "::",
                stringify!(compare)
            )
        );
    }
    test_field_compare();
    fn test_field_hash() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_hash_type>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hash) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(st_hash_type),
                "::",
                stringify!(hash)
            )
        );
    }
    test_field_hash();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct st_table {
    pub type_: *const st_hash_type,
    pub num_bins: st_index_t,
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub as_: st_table__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union st_table__bindgen_ty_1 {
    pub big: st_table__bindgen_ty_1__bindgen_ty_1,
    pub packed: st_table__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table__bindgen_ty_1__bindgen_ty_1 {
    pub bins: *mut *mut st_table_entry,
    pub head: *mut st_table_entry,
    pub tail: *mut st_table_entry,
}
#[test]
fn bindgen_test_layout_st_table__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<st_table__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(st_table__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<st_table__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(st_table__bindgen_ty_1__bindgen_ty_1)
        )
    );
    fn test_field_bins() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<st_table__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bins) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(bins)
            )
        );
    }
    test_field_bins();
    fn test_field_head() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<st_table__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).head) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(head)
            )
        );
    }
    test_field_head();
    fn test_field_tail() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<st_table__bindgen_ty_1__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tail) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1__bindgen_ty_1),
                "::",
                stringify!(tail)
            )
        );
    }
    test_field_tail();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table__bindgen_ty_1__bindgen_ty_2 {
    pub entries: *mut st_packed_entry,
    pub real_entries: st_index_t,
}
#[test]
fn bindgen_test_layout_st_table__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<st_table__bindgen_ty_1__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(st_table__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<st_table__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(st_table__bindgen_ty_1__bindgen_ty_2)
        )
    );
    fn test_field_entries() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<st_table__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entries) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(entries)
            )
        );
    }
    test_field_entries();
    fn test_field_real_entries() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<st_table__bindgen_ty_1__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).real_entries) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1__bindgen_ty_2),
                "::",
                stringify!(real_entries)
            )
        );
    }
    test_field_real_entries();
}
#[test]
fn bindgen_test_layout_st_table__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<st_table__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(st_table__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<st_table__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(st_table__bindgen_ty_1))
    );
    fn test_field_big() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_table__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).big) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1),
                "::",
                stringify!(big)
            )
        );
    }
    test_field_big();
    fn test_field_packed() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_table__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).packed) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table__bindgen_ty_1),
                "::",
                stringify!(packed)
            )
        );
    }
    test_field_packed();
}
impl ::std::fmt::Debug for st_table__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "st_table__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_st_table() {
    assert_eq!(
        ::std::mem::size_of::<st_table>(),
        48usize,
        concat!("Size of: ", stringify!(st_table))
    );
    assert_eq!(
        ::std::mem::align_of::<st_table>(),
        8usize,
        concat!("Alignment of ", stringify!(st_table))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_num_bins() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).num_bins) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table),
                "::",
                stringify!(num_bins)
            )
        );
    }
    test_field_num_bins();
    fn test_field_as() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<st_table>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).as_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(st_table),
                "::",
                stringify!(as_)
            )
        );
    }
    test_field_as();
}
impl ::std::fmt::Debug for st_table {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "st_table {{ type: {:?}, num_bins: {:?}, entries_packed : {:?}, num_entries : {:?}, as: {:?} }}" , self . type_ , self . num_bins , self . entries_packed () , self . num_entries () , self . as_)
    }
}
impl st_table {
    #[inline]
    pub fn entries_packed(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_entries_packed(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn num_entries(&self) -> st_index_t {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 63u8) as usize) }
    }
    #[inline]
    pub fn set_num_entries(&mut self, val: st_index_t) {
        unsafe {
            let val: usize = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 63u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        entries_packed: ::std::os::raw::c_uint,
        num_entries: st_index_t,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let entries_packed: u32 = unsafe { ::std::mem::transmute(entries_packed) };
            entries_packed as u64
        });
        __bindgen_bitfield_unit.set(1usize, 63u8, {
            let num_entries: usize = unsafe { ::std::mem::transmute(num_entries) };
            num_entries as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type rb_unblock_function_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type rb_event_flag_t = usize;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RNode {
    pub flags: VALUE,
    pub nd_reserved: VALUE,
    pub u1: RNode__bindgen_ty_1,
    pub u2: RNode__bindgen_ty_2,
    pub u3: RNode__bindgen_ty_3,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RNode__bindgen_ty_1 {
    pub node: *mut RNode,
    pub id: ID,
    pub value: VALUE,
    pub cfunc: ::std::option::Option<unsafe extern "C" fn() -> VALUE>,
    pub tbl: *mut ID,
}
#[test]
fn bindgen_test_layout_RNode__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<RNode__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(RNode__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<RNode__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(RNode__bindgen_ty_1))
    );
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_1),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_1),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_1),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_cfunc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfunc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_1),
                "::",
                stringify!(cfunc)
            )
        );
    }
    test_field_cfunc();
    fn test_field_tbl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tbl) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_1),
                "::",
                stringify!(tbl)
            )
        );
    }
    test_field_tbl();
}
impl ::std::fmt::Debug for RNode__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RNode__bindgen_ty_1 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RNode__bindgen_ty_2 {
    pub node: *mut RNode,
    pub id: ID,
    pub argc: ::std::os::raw::c_long,
    pub value: VALUE,
}
#[test]
fn bindgen_test_layout_RNode__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<RNode__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(RNode__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<RNode__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(RNode__bindgen_ty_2))
    );
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_2),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_2),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_2),
                "::",
                stringify!(argc)
            )
        );
    }
    test_field_argc();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_2),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
impl ::std::fmt::Debug for RNode__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RNode__bindgen_ty_2 {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RNode__bindgen_ty_3 {
    pub node: *mut RNode,
    pub id: ID,
    pub state: ::std::os::raw::c_long,
    pub entry: *mut rb_global_entry,
    pub args: *mut rb_args_info,
    pub cnt: ::std::os::raw::c_long,
    pub value: VALUE,
}
#[test]
fn bindgen_test_layout_RNode__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<RNode__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(RNode__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<RNode__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(RNode__bindgen_ty_3))
    );
    fn test_field_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(node)
            )
        );
    }
    test_field_node();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_entry() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).entry) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(entry)
            )
        );
    }
    test_field_entry();
    fn test_field_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).args) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(args)
            )
        );
    }
    test_field_args();
    fn test_field_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(cnt)
            )
        );
    }
    test_field_cnt();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode__bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode__bindgen_ty_3),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
}
impl ::std::fmt::Debug for RNode__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "RNode__bindgen_ty_3 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_RNode() {
    assert_eq!(
        ::std::mem::size_of::<RNode>(),
        40usize,
        concat!("Size of: ", stringify!(RNode))
    );
    assert_eq!(
        ::std::mem::align_of::<RNode>(),
        8usize,
        concat!("Alignment of ", stringify!(RNode))
    );
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_nd_reserved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nd_reserved) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RNode),
                "::",
                stringify!(nd_reserved)
            )
        );
    }
    test_field_nd_reserved();
    fn test_field_u1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u1) as usize - ptr as usize
            },
            16usize,
            concat!("Offset of field: ", stringify!(RNode), "::", stringify!(u1))
        );
    }
    test_field_u1();
    fn test_field_u2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u2) as usize - ptr as usize
            },
            24usize,
            concat!("Offset of field: ", stringify!(RNode), "::", stringify!(u2))
        );
    }
    test_field_u2();
    fn test_field_u3() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RNode>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).u3) as usize - ptr as usize
            },
            32usize,
            concat!("Offset of field: ", stringify!(RNode), "::", stringify!(u3))
        );
    }
    test_field_u3();
}
impl ::std::fmt::Debug for RNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "RNode {{ flags: {:?}, nd_reserved: {:?}, u1: {:?}, u2: {:?}, u3: {:?} }}",
            self.flags, self.nd_reserved, self.u1, self.u2, self.u3
        )
    }
}
pub type NODE = RNode;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_global_entry {
    pub var: *mut rb_global_variable,
    pub id: ID,
}
#[test]
fn bindgen_test_layout_rb_global_entry() {
    assert_eq!(
        ::std::mem::size_of::<rb_global_entry>(),
        16usize,
        concat!("Size of: ", stringify!(rb_global_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_global_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_global_entry))
    );
    fn test_field_var() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).var) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_entry),
                "::",
                stringify!(var)
            )
        );
    }
    test_field_var();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_entry),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_args_info {
    pub pre_init: *mut NODE,
    pub post_init: *mut NODE,
    pub pre_args_num: ::std::os::raw::c_int,
    pub post_args_num: ::std::os::raw::c_int,
    pub first_post_arg: ID,
    pub rest_arg: ID,
    pub block_arg: ID,
    pub kw_args: *mut NODE,
    pub kw_rest_arg: *mut NODE,
    pub opt_args: *mut NODE,
}
#[test]
fn bindgen_test_layout_rb_args_info() {
    assert_eq!(
        ::std::mem::size_of::<rb_args_info>(),
        72usize,
        concat!("Size of: ", stringify!(rb_args_info))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_args_info>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_args_info))
    );
    fn test_field_pre_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pre_init) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(pre_init)
            )
        );
    }
    test_field_pre_init();
    fn test_field_post_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).post_init) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(post_init)
            )
        );
    }
    test_field_post_init();
    fn test_field_pre_args_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pre_args_num) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(pre_args_num)
            )
        );
    }
    test_field_pre_args_num();
    fn test_field_post_args_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).post_args_num) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(post_args_num)
            )
        );
    }
    test_field_post_args_num();
    fn test_field_first_post_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_post_arg) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(first_post_arg)
            )
        );
    }
    test_field_first_post_arg();
    fn test_field_rest_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rest_arg) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(rest_arg)
            )
        );
    }
    test_field_rest_arg();
    fn test_field_block_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).block_arg) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(block_arg)
            )
        );
    }
    test_field_block_arg();
    fn test_field_kw_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kw_args) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(kw_args)
            )
        );
    }
    test_field_kw_args();
    fn test_field_kw_rest_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).kw_rest_arg) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(kw_rest_arg)
            )
        );
    }
    test_field_kw_rest_arg();
    fn test_field_opt_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_args_info>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opt_args) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_args_info),
                "::",
                stringify!(opt_args)
            )
        );
    }
    test_field_opt_args();
}
pub const ruby_method_ids_idDot2: ruby_method_ids = 128;
pub const ruby_method_ids_idDot3: ruby_method_ids = 129;
pub const ruby_method_ids_idUPlus: ruby_method_ids = 130;
pub const ruby_method_ids_idUMinus: ruby_method_ids = 131;
pub const ruby_method_ids_idPow: ruby_method_ids = 132;
pub const ruby_method_ids_idCmp: ruby_method_ids = 134;
pub const ruby_method_ids_idPLUS: ruby_method_ids = 43;
pub const ruby_method_ids_idMINUS: ruby_method_ids = 45;
pub const ruby_method_ids_idMULT: ruby_method_ids = 42;
pub const ruby_method_ids_idDIV: ruby_method_ids = 47;
pub const ruby_method_ids_idMOD: ruby_method_ids = 37;
pub const ruby_method_ids_idLT: ruby_method_ids = 60;
pub const ruby_method_ids_idLTLT: ruby_method_ids = 135;
pub const ruby_method_ids_idLE: ruby_method_ids = 137;
pub const ruby_method_ids_idGT: ruby_method_ids = 62;
pub const ruby_method_ids_idGE: ruby_method_ids = 138;
pub const ruby_method_ids_idEq: ruby_method_ids = 139;
pub const ruby_method_ids_idEqq: ruby_method_ids = 140;
pub const ruby_method_ids_idNeq: ruby_method_ids = 141;
pub const ruby_method_ids_idNot: ruby_method_ids = 33;
pub const ruby_method_ids_idBackquote: ruby_method_ids = 96;
pub const ruby_method_ids_idEqTilde: ruby_method_ids = 142;
pub const ruby_method_ids_idNeqTilde: ruby_method_ids = 143;
pub const ruby_method_ids_idAREF: ruby_method_ids = 144;
pub const ruby_method_ids_idASET: ruby_method_ids = 145;
pub const ruby_method_ids_tPRESERVED_ID_BEGIN: ruby_method_ids = 147;
pub const ruby_method_ids_idNULL: ruby_method_ids = 148;
pub const ruby_method_ids_idEmptyP: ruby_method_ids = 149;
pub const ruby_method_ids_idRespond_to: ruby_method_ids = 150;
pub const ruby_method_ids_idRespond_to_missing: ruby_method_ids = 151;
pub const ruby_method_ids_idIFUNC: ruby_method_ids = 152;
pub const ruby_method_ids_idCFUNC: ruby_method_ids = 153;
pub const ruby_method_ids_id_core_set_method_alias: ruby_method_ids = 154;
pub const ruby_method_ids_id_core_set_variable_alias: ruby_method_ids = 155;
pub const ruby_method_ids_id_core_undef_method: ruby_method_ids = 156;
pub const ruby_method_ids_id_core_define_method: ruby_method_ids = 157;
pub const ruby_method_ids_id_core_define_singleton_method: ruby_method_ids = 158;
pub const ruby_method_ids_id_core_set_postexe: ruby_method_ids = 159;
pub const ruby_method_ids_id_core_hash_from_ary: ruby_method_ids = 160;
pub const ruby_method_ids_id_core_hash_merge_ary: ruby_method_ids = 161;
pub const ruby_method_ids_id_core_hash_merge_ptr: ruby_method_ids = 162;
pub const ruby_method_ids_id_core_hash_merge_kwd: ruby_method_ids = 163;
pub const ruby_method_ids_tPRESERVED_ID_END: ruby_method_ids = 164;
pub const ruby_method_ids_tIntern: ruby_method_ids = 165;
pub const ruby_method_ids_tMethodMissing: ruby_method_ids = 166;
pub const ruby_method_ids_tLength: ruby_method_ids = 167;
pub const ruby_method_ids_tSize: ruby_method_ids = 168;
pub const ruby_method_ids_tGets: ruby_method_ids = 169;
pub const ruby_method_ids_tSucc: ruby_method_ids = 170;
pub const ruby_method_ids_tEach: ruby_method_ids = 171;
pub const ruby_method_ids_tProc: ruby_method_ids = 172;
pub const ruby_method_ids_tLambda: ruby_method_ids = 173;
pub const ruby_method_ids_tSend: ruby_method_ids = 174;
pub const ruby_method_ids_t__send__: ruby_method_ids = 175;
pub const ruby_method_ids_tInitialize: ruby_method_ids = 176;
pub const ruby_method_ids_tInitialize_copy: ruby_method_ids = 177;
pub const ruby_method_ids_tInitialize_clone: ruby_method_ids = 178;
pub const ruby_method_ids_tInitialize_dup: ruby_method_ids = 179;
pub const ruby_method_ids_tUScore: ruby_method_ids = 180;
pub const ruby_method_ids_idIntern: ruby_method_ids = 1320;
pub const ruby_method_ids_idMethodMissing: ruby_method_ids = 1328;
pub const ruby_method_ids_idLength: ruby_method_ids = 1336;
pub const ruby_method_ids_idSize: ruby_method_ids = 1344;
pub const ruby_method_ids_idGets: ruby_method_ids = 1352;
pub const ruby_method_ids_idSucc: ruby_method_ids = 1360;
pub const ruby_method_ids_idEach: ruby_method_ids = 1368;
pub const ruby_method_ids_idProc: ruby_method_ids = 1376;
pub const ruby_method_ids_idLambda: ruby_method_ids = 1384;
pub const ruby_method_ids_idSend: ruby_method_ids = 1392;
pub const ruby_method_ids_id__send__: ruby_method_ids = 1400;
pub const ruby_method_ids_idInitialize: ruby_method_ids = 1408;
pub const ruby_method_ids_idInitialize_copy: ruby_method_ids = 1416;
pub const ruby_method_ids_idInitialize_clone: ruby_method_ids = 1424;
pub const ruby_method_ids_idInitialize_dup: ruby_method_ids = 1432;
pub const ruby_method_ids_idUScore: ruby_method_ids = 1440;
pub const ruby_method_ids_tLAST_OP_ID: ruby_method_ids = 163;
pub const ruby_method_ids_idLAST_OP_ID: ruby_method_ids = 20;
pub type ruby_method_ids = ::std::os::raw::c_uint;
pub const rb_method_flag_t_NOEX_PUBLIC: rb_method_flag_t = 0;
pub const rb_method_flag_t_NOEX_NOSUPER: rb_method_flag_t = 1;
pub const rb_method_flag_t_NOEX_PRIVATE: rb_method_flag_t = 2;
pub const rb_method_flag_t_NOEX_PROTECTED: rb_method_flag_t = 4;
pub const rb_method_flag_t_NOEX_MASK: rb_method_flag_t = 6;
pub const rb_method_flag_t_NOEX_BASIC: rb_method_flag_t = 8;
pub const rb_method_flag_t_NOEX_UNDEF: rb_method_flag_t = 1;
pub const rb_method_flag_t_NOEX_MODFUNC: rb_method_flag_t = 18;
pub const rb_method_flag_t_NOEX_SUPER: rb_method_flag_t = 32;
pub const rb_method_flag_t_NOEX_VCALL: rb_method_flag_t = 64;
pub const rb_method_flag_t_NOEX_RESPONDS: rb_method_flag_t = 128;
pub const rb_method_flag_t_NOEX_BIT_WIDTH: rb_method_flag_t = 8;
pub const rb_method_flag_t_NOEX_SAFE_SHIFT_OFFSET: rb_method_flag_t = 8;
pub type rb_method_flag_t = ::std::os::raw::c_uint;
pub const rb_method_type_t_VM_METHOD_TYPE_ISEQ: rb_method_type_t = 0;
pub const rb_method_type_t_VM_METHOD_TYPE_CFUNC: rb_method_type_t = 1;
pub const rb_method_type_t_VM_METHOD_TYPE_ATTRSET: rb_method_type_t = 2;
pub const rb_method_type_t_VM_METHOD_TYPE_IVAR: rb_method_type_t = 3;
pub const rb_method_type_t_VM_METHOD_TYPE_BMETHOD: rb_method_type_t = 4;
pub const rb_method_type_t_VM_METHOD_TYPE_ZSUPER: rb_method_type_t = 5;
pub const rb_method_type_t_VM_METHOD_TYPE_UNDEF: rb_method_type_t = 6;
pub const rb_method_type_t_VM_METHOD_TYPE_NOTIMPLEMENTED: rb_method_type_t = 7;
pub const rb_method_type_t_VM_METHOD_TYPE_OPTIMIZED: rb_method_type_t = 8;
pub const rb_method_type_t_VM_METHOD_TYPE_MISSING: rb_method_type_t = 9;
pub const rb_method_type_t_VM_METHOD_TYPE_REFINED: rb_method_type_t = 10;
pub type rb_method_type_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_cfunc_struct {
    pub func: ::std::option::Option<unsafe extern "C" fn() -> VALUE>,
    pub invoker: ::std::option::Option<
        unsafe extern "C" fn(
            func: ::std::option::Option<unsafe extern "C" fn() -> VALUE>,
            recv: VALUE,
            argc: ::std::os::raw::c_int,
            argv: *const VALUE,
        ) -> VALUE,
    >,
    pub argc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_method_cfunc_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_method_cfunc_struct>(),
        24usize,
        concat!("Size of: ", stringify!(rb_method_cfunc_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_method_cfunc_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_method_cfunc_struct))
    );
    fn test_field_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_cfunc_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_cfunc_struct),
                "::",
                stringify!(func)
            )
        );
    }
    test_field_func();
    fn test_field_invoker() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_cfunc_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).invoker) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_cfunc_struct),
                "::",
                stringify!(invoker)
            )
        );
    }
    test_field_invoker();
    fn test_field_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_cfunc_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_cfunc_struct),
                "::",
                stringify!(argc)
            )
        );
    }
    test_field_argc();
}
pub type rb_method_cfunc_t = rb_method_cfunc_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_attr_struct {
    pub id: ID,
    pub location: VALUE,
}
#[test]
fn bindgen_test_layout_rb_method_attr_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_method_attr_struct>(),
        16usize,
        concat!("Size of: ", stringify!(rb_method_attr_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_method_attr_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_method_attr_struct))
    );
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_attr_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_attr_struct),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_attr_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_attr_struct),
                "::",
                stringify!(location)
            )
        );
    }
    test_field_location();
}
pub type rb_method_attr_t = rb_method_attr_struct;
pub type rb_iseq_t = rb_iseq_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_method_definition_struct {
    pub type_: rb_method_type_t,
    pub original_id: ID,
    pub body: rb_method_definition_struct__bindgen_ty_1,
    pub alias_count: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_method_definition_struct__bindgen_ty_1 {
    pub iseq: *mut rb_iseq_t,
    pub cfunc: rb_method_cfunc_t,
    pub attr: rb_method_attr_t,
    pub proc_: VALUE,
    pub optimize_type: rb_method_definition_struct__bindgen_ty_1_method_optimized_type,
    pub orig_me: *mut rb_method_entry_struct,
}
pub const rb_method_definition_struct__bindgen_ty_1_method_optimized_type_OPTIMIZED_METHOD_TYPE_SEND : rb_method_definition_struct__bindgen_ty_1_method_optimized_type = 0 ;
pub const rb_method_definition_struct__bindgen_ty_1_method_optimized_type_OPTIMIZED_METHOD_TYPE_CALL : rb_method_definition_struct__bindgen_ty_1_method_optimized_type = 1 ;
pub const rb_method_definition_struct__bindgen_ty_1_method_optimized_type_OPTIMIZED_METHOD_TYPE__MAX : rb_method_definition_struct__bindgen_ty_1_method_optimized_type = 2 ;
pub type rb_method_definition_struct__bindgen_ty_1_method_optimized_type = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_rb_method_definition_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rb_method_definition_struct__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(rb_method_definition_struct__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<rb_method_definition_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rb_method_definition_struct__bindgen_ty_1)
        )
    );
    fn test_field_iseq() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(iseq)
            )
        );
    }
    test_field_iseq();
    fn test_field_cfunc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfunc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(cfunc)
            )
        );
    }
    test_field_cfunc();
    fn test_field_attr() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(attr)
            )
        );
    }
    test_field_attr();
    fn test_field_proc() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(proc_)
            )
        );
    }
    test_field_proc();
    fn test_field_optimize_type() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).optimize_type) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(optimize_type)
            )
        );
    }
    test_field_optimize_type();
    fn test_field_orig_me() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<rb_method_definition_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orig_me) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct__bindgen_ty_1),
                "::",
                stringify!(orig_me)
            )
        );
    }
    test_field_orig_me();
}
impl ::std::fmt::Debug for rb_method_definition_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_method_definition_struct__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_rb_method_definition_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_method_definition_struct>(),
        48usize,
        concat!("Size of: ", stringify!(rb_method_definition_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_method_definition_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_method_definition_struct))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_definition_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_original_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_definition_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).original_id) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct),
                "::",
                stringify!(original_id)
            )
        );
    }
    test_field_original_id();
    fn test_field_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_definition_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct),
                "::",
                stringify!(body)
            )
        );
    }
    test_field_body();
    fn test_field_alias_count() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_definition_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alias_count) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_definition_struct),
                "::",
                stringify!(alias_count)
            )
        );
    }
    test_field_alias_count();
}
pub type rb_method_definition_t = rb_method_definition_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_method_entry_struct {
    pub flag: rb_method_flag_t,
    pub mark: ::std::os::raw::c_char,
    pub def: *mut rb_method_definition_t,
    pub called_id: ID,
    pub klass: VALUE,
}
#[test]
fn bindgen_test_layout_rb_method_entry_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_method_entry_struct>(),
        32usize,
        concat!("Size of: ", stringify!(rb_method_entry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_method_entry_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_method_entry_struct))
    );
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_entry_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_entry_struct),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_mark() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_entry_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mark) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_entry_struct),
                "::",
                stringify!(mark)
            )
        );
    }
    test_field_mark();
    fn test_field_def() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_entry_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).def) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_entry_struct),
                "::",
                stringify!(def)
            )
        );
    }
    test_field_def();
    fn test_field_called_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_entry_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).called_id) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_entry_struct),
                "::",
                stringify!(called_id)
            )
        );
    }
    test_field_called_id();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_method_entry_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_method_entry_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
}
pub type rb_method_entry_t = rb_method_entry_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct unlinked_method_entry_list_entry {
    pub next: *mut unlinked_method_entry_list_entry,
    pub me: *mut rb_method_entry_t,
}
#[test]
fn bindgen_test_layout_unlinked_method_entry_list_entry() {
    assert_eq!(
        ::std::mem::size_of::<unlinked_method_entry_list_entry>(),
        16usize,
        concat!("Size of: ", stringify!(unlinked_method_entry_list_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<unlinked_method_entry_list_entry>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(unlinked_method_entry_list_entry)
        )
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<unlinked_method_entry_list_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(unlinked_method_entry_list_entry),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_me() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<unlinked_method_entry_list_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).me) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(unlinked_method_entry_list_entry),
                "::",
                stringify!(me)
            )
        );
    }
    test_field_me();
}
pub type rb_atomic_t = ::std::os::raw::c_uint;
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
pub type rb_thread_id_t = pthread_t;
pub type rb_thread_lock_t = pthread_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_thread_cond_struct {
    pub cond: pthread_cond_t,
    pub clockid: clockid_t,
}
#[test]
fn bindgen_test_layout_rb_thread_cond_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_thread_cond_struct>(),
        56usize,
        concat!("Size of: ", stringify!(rb_thread_cond_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_thread_cond_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_thread_cond_struct))
    );
    fn test_field_cond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_cond_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_cond_struct),
                "::",
                stringify!(cond)
            )
        );
    }
    test_field_cond();
    fn test_field_clockid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_cond_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).clockid) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_cond_struct),
                "::",
                stringify!(clockid)
            )
        );
    }
    test_field_clockid();
}
impl ::std::fmt::Debug for rb_thread_cond_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "rb_thread_cond_struct {{ cond: {:?}, clockid: {:?} }}",
            self.cond, self.clockid
        )
    }
}
pub type rb_thread_cond_t = rb_thread_cond_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct native_thread_data_struct {
    pub signal_thread_list: *mut ::std::os::raw::c_void,
    pub sleep_cond: rb_thread_cond_t,
}
#[test]
fn bindgen_test_layout_native_thread_data_struct() {
    assert_eq!(
        ::std::mem::size_of::<native_thread_data_struct>(),
        64usize,
        concat!("Size of: ", stringify!(native_thread_data_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<native_thread_data_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(native_thread_data_struct))
    );
    fn test_field_signal_thread_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<native_thread_data_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).signal_thread_list) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(native_thread_data_struct),
                "::",
                stringify!(signal_thread_list)
            )
        );
    }
    test_field_signal_thread_list();
    fn test_field_sleep_cond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<native_thread_data_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sleep_cond) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(native_thread_data_struct),
                "::",
                stringify!(sleep_cond)
            )
        );
    }
    test_field_sleep_cond();
}
impl ::std::fmt::Debug for native_thread_data_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "native_thread_data_struct {{ signal_thread_list: {:?}, sleep_cond: {:?} }}",
            self.signal_thread_list, self.sleep_cond
        )
    }
}
pub type native_thread_data_t = native_thread_data_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_global_vm_lock_struct {
    pub acquired: ::std::os::raw::c_ulong,
    pub lock: pthread_mutex_t,
    pub waiting: ::std::os::raw::c_ulong,
    pub cond: rb_thread_cond_t,
    pub switch_cond: rb_thread_cond_t,
    pub switch_wait_cond: rb_thread_cond_t,
    pub need_yield: ::std::os::raw::c_int,
    pub wait_yield: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_global_vm_lock_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_global_vm_lock_struct>(),
        232usize,
        concat!("Size of: ", stringify!(rb_global_vm_lock_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_global_vm_lock_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_global_vm_lock_struct))
    );
    fn test_field_acquired() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).acquired) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(acquired)
            )
        );
    }
    test_field_acquired();
    fn test_field_lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(lock)
            )
        );
    }
    test_field_lock();
    fn test_field_waiting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).waiting) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(waiting)
            )
        );
    }
    test_field_waiting();
    fn test_field_cond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(cond)
            )
        );
    }
    test_field_cond();
    fn test_field_switch_cond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).switch_cond) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(switch_cond)
            )
        );
    }
    test_field_switch_cond();
    fn test_field_switch_wait_cond() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).switch_wait_cond) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(switch_wait_cond)
            )
        );
    }
    test_field_switch_wait_cond();
    fn test_field_need_yield() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).need_yield) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(need_yield)
            )
        );
    }
    test_field_need_yield();
    fn test_field_wait_yield() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_global_vm_lock_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wait_yield) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_global_vm_lock_struct),
                "::",
                stringify!(wait_yield)
            )
        );
    }
    test_field_wait_yield();
}
impl ::std::fmt::Debug for rb_global_vm_lock_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_global_vm_lock_struct {{ acquired: {:?}, lock: {:?}, waiting: {:?}, cond: {:?}, switch_cond: {:?}, switch_wait_cond: {:?}, need_yield: {:?}, wait_yield: {:?} }}" , self . acquired , self . lock , self . waiting , self . cond , self . switch_cond , self . switch_wait_cond , self . need_yield , self . wait_yield)
    }
}
pub type rb_global_vm_lock_t = rb_global_vm_lock_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    fn test_field___jmpbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__jmpbuf)
            )
        );
    }
    test_field___jmpbuf();
    fn test_field___mask_was_saved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__mask_was_saved)
            )
        );
    }
    test_field___mask_was_saved();
    fn test_field___saved_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<__jmp_buf_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(__jmp_buf_tag),
                "::",
                stringify!(__saved_mask)
            )
        );
    }
    test_field___saved_mask();
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
pub type rb_num_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data_ensure_node_stack {
    _unused: [u8; 0],
}
pub type rb_compile_option_t = rb_compile_option_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct iseq_inline_cache_entry {
    pub ic_vmstat: VALUE,
    pub ic_class: VALUE,
    pub ic_value: iseq_inline_cache_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union iseq_inline_cache_entry__bindgen_ty_1 {
    pub value: VALUE,
    pub index: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_iseq_inline_cache_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<iseq_inline_cache_entry__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(iseq_inline_cache_entry__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_inline_cache_entry__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(iseq_inline_cache_entry__bindgen_ty_1)
        )
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<iseq_inline_cache_entry__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_inline_cache_entry__bindgen_ty_1),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<iseq_inline_cache_entry__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_inline_cache_entry__bindgen_ty_1),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
}
impl ::std::fmt::Debug for iseq_inline_cache_entry__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "iseq_inline_cache_entry__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_iseq_inline_cache_entry() {
    assert_eq!(
        ::std::mem::size_of::<iseq_inline_cache_entry>(),
        24usize,
        concat!("Size of: ", stringify!(iseq_inline_cache_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_inline_cache_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(iseq_inline_cache_entry))
    );
    fn test_field_ic_vmstat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_inline_cache_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ic_vmstat) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_inline_cache_entry),
                "::",
                stringify!(ic_vmstat)
            )
        );
    }
    test_field_ic_vmstat();
    fn test_field_ic_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_inline_cache_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ic_class) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_inline_cache_entry),
                "::",
                stringify!(ic_class)
            )
        );
    }
    test_field_ic_class();
    fn test_field_ic_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_inline_cache_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ic_value) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_inline_cache_entry),
                "::",
                stringify!(ic_value)
            )
        );
    }
    test_field_ic_value();
}
impl ::std::fmt::Debug for iseq_inline_cache_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "iseq_inline_cache_entry {{ ic_vmstat: {:?}, ic_class: {:?}, ic_value: {:?} }}",
            self.ic_vmstat, self.ic_class, self.ic_value
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_call_info_struct {
    pub mid: ID,
    pub flag: VALUE,
    pub orig_argc: ::std::os::raw::c_int,
    pub blockiseq: *mut rb_iseq_t,
    pub vmstat: VALUE,
    pub klass: VALUE,
    pub me: *const rb_method_entry_t,
    pub defined_class: VALUE,
    pub argc: ::std::os::raw::c_int,
    pub blockptr: *mut rb_block_struct,
    pub recv: VALUE,
    pub aux: rb_call_info_struct__bindgen_ty_1,
    pub call: ::std::option::Option<
        unsafe extern "C" fn(
            th: *mut rb_thread_struct,
            cfp: *mut rb_control_frame_struct,
            ci: *mut rb_call_info_struct,
        ) -> VALUE,
    >,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union rb_call_info_struct__bindgen_ty_1 {
    pub opt_pc: ::std::os::raw::c_int,
    pub index: ::std::os::raw::c_long,
    pub missing_reason: ::std::os::raw::c_int,
    pub inc_sp: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_call_info_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rb_call_info_struct__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(rb_call_info_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_call_info_struct__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(rb_call_info_struct__bindgen_ty_1)
        )
    );
    fn test_field_opt_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opt_pc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct__bindgen_ty_1),
                "::",
                stringify!(opt_pc)
            )
        );
    }
    test_field_opt_pc();
    fn test_field_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct__bindgen_ty_1),
                "::",
                stringify!(index)
            )
        );
    }
    test_field_index();
    fn test_field_missing_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).missing_reason) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct__bindgen_ty_1),
                "::",
                stringify!(missing_reason)
            )
        );
    }
    test_field_missing_reason();
    fn test_field_inc_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inc_sp) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct__bindgen_ty_1),
                "::",
                stringify!(inc_sp)
            )
        );
    }
    test_field_inc_sp();
}
impl ::std::fmt::Debug for rb_call_info_struct__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "rb_call_info_struct__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_rb_call_info_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_call_info_struct>(),
        104usize,
        concat!("Size of: ", stringify!(rb_call_info_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_call_info_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_call_info_struct))
    );
    fn test_field_mid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mid) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(mid)
            )
        );
    }
    test_field_mid();
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_orig_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orig_argc) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(orig_argc)
            )
        );
    }
    test_field_orig_argc();
    fn test_field_blockiseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blockiseq) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(blockiseq)
            )
        );
    }
    test_field_blockiseq();
    fn test_field_vmstat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vmstat) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(vmstat)
            )
        );
    }
    test_field_vmstat();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_me() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).me) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(me)
            )
        );
    }
    test_field_me();
    fn test_field_defined_class() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).defined_class) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(defined_class)
            )
        );
    }
    test_field_defined_class();
    fn test_field_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(argc)
            )
        );
    }
    test_field_argc();
    fn test_field_blockptr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blockptr) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(blockptr)
            )
        );
    }
    test_field_blockptr();
    fn test_field_recv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).recv) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(recv)
            )
        );
    }
    test_field_recv();
    fn test_field_aux() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).aux) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(aux)
            )
        );
    }
    test_field_aux();
    fn test_field_call() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_call_info_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).call) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_call_info_struct),
                "::",
                stringify!(call)
            )
        );
    }
    test_field_call();
}
impl ::std::fmt::Debug for rb_call_info_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_call_info_struct {{ mid: {:?}, flag: {:?}, orig_argc: {:?}, blockiseq: {:?}, vmstat: {:?}, klass: {:?}, me: {:?}, defined_class: {:?}, argc: {:?}, blockptr: {:?}, recv: {:?}, aux: {:?}, call: {:?} }}" , self . mid , self . flag , self . orig_argc , self . blockiseq , self . vmstat , self . klass , self . me , self . defined_class , self . argc , self . blockptr , self . recv , self . aux , self . call)
    }
}
pub type rb_call_info_t = rb_call_info_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_location_struct {
    pub path: VALUE,
    pub absolute_path: VALUE,
    pub base_label: VALUE,
    pub label: VALUE,
    pub first_lineno: size_t,
}
#[test]
fn bindgen_test_layout_rb_iseq_location_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_iseq_location_struct>(),
        40usize,
        concat!("Size of: ", stringify!(rb_iseq_location_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_iseq_location_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_iseq_location_struct))
    );
    fn test_field_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_location_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_location_struct),
                "::",
                stringify!(path)
            )
        );
    }
    test_field_path();
    fn test_field_absolute_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_location_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).absolute_path) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_location_struct),
                "::",
                stringify!(absolute_path)
            )
        );
    }
    test_field_absolute_path();
    fn test_field_base_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_location_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base_label) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_location_struct),
                "::",
                stringify!(base_label)
            )
        );
    }
    test_field_base_label();
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_location_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_location_struct),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_first_lineno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_location_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_lineno) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_location_struct),
                "::",
                stringify!(first_lineno)
            )
        );
    }
    test_field_first_lineno();
}
pub type rb_iseq_location_t = rb_iseq_location_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_iseq_struct {
    pub type_: rb_iseq_struct_iseq_type,
    pub location: rb_iseq_location_t,
    pub iseq: *mut VALUE,
    pub iseq_encoded: *mut VALUE,
    pub iseq_size: ::std::os::raw::c_ulong,
    pub mark_ary: VALUE,
    pub coverage: VALUE,
    pub line_info_table: *mut iseq_line_info_entry,
    pub line_info_size: size_t,
    pub local_table: *mut ID,
    pub local_table_size: ::std::os::raw::c_int,
    pub local_size: ::std::os::raw::c_int,
    pub ic_entries: *mut iseq_inline_cache_entry,
    pub ic_size: ::std::os::raw::c_int,
    pub callinfo_entries: *mut rb_call_info_t,
    pub callinfo_size: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub arg_simple: ::std::os::raw::c_int,
    pub arg_rest: ::std::os::raw::c_int,
    pub arg_block: ::std::os::raw::c_int,
    pub arg_opts: ::std::os::raw::c_int,
    pub arg_post_len: ::std::os::raw::c_int,
    pub arg_post_start: ::std::os::raw::c_int,
    pub arg_size: ::std::os::raw::c_int,
    pub arg_opt_table: *mut VALUE,
    pub arg_keyword: ::std::os::raw::c_int,
    pub arg_keyword_check: ::std::os::raw::c_int,
    pub arg_keywords: ::std::os::raw::c_int,
    pub arg_keyword_table: *mut ID,
    pub stack_max: size_t,
    pub catch_table: *mut iseq_catch_table_entry,
    pub catch_table_size: ::std::os::raw::c_int,
    pub parent_iseq: *mut rb_iseq_struct,
    pub local_iseq: *mut rb_iseq_struct,
    pub self_: VALUE,
    pub orig: VALUE,
    pub cref_stack: *mut NODE,
    pub klass: VALUE,
    pub defined_method_id: ID,
    pub flip_cnt: rb_num_t,
    pub compile_data: *mut iseq_compile_data,
}
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_TOP: rb_iseq_struct_iseq_type = 0;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_METHOD: rb_iseq_struct_iseq_type = 1;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_BLOCK: rb_iseq_struct_iseq_type = 2;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_CLASS: rb_iseq_struct_iseq_type = 3;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_RESCUE: rb_iseq_struct_iseq_type = 4;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_ENSURE: rb_iseq_struct_iseq_type = 5;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_EVAL: rb_iseq_struct_iseq_type = 6;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_MAIN: rb_iseq_struct_iseq_type = 7;
pub const rb_iseq_struct_iseq_type_ISEQ_TYPE_DEFINED_GUARD: rb_iseq_struct_iseq_type = 8;
pub type rb_iseq_struct_iseq_type = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_rb_iseq_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_iseq_struct>(),
        312usize,
        concat!("Size of: ", stringify!(rb_iseq_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_iseq_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_iseq_struct))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_location() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(location)
            )
        );
    }
    test_field_location();
    fn test_field_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(iseq)
            )
        );
    }
    test_field_iseq();
    fn test_field_iseq_encoded() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq_encoded) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(iseq_encoded)
            )
        );
    }
    test_field_iseq_encoded();
    fn test_field_iseq_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq_size) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(iseq_size)
            )
        );
    }
    test_field_iseq_size();
    fn test_field_mark_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mark_ary) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(mark_ary)
            )
        );
    }
    test_field_mark_ary();
    fn test_field_coverage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coverage) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(coverage)
            )
        );
    }
    test_field_coverage();
    fn test_field_line_info_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).line_info_table) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(line_info_table)
            )
        );
    }
    test_field_line_info_table();
    fn test_field_line_info_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).line_info_size) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(line_info_size)
            )
        );
    }
    test_field_line_info_size();
    fn test_field_local_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_table) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(local_table)
            )
        );
    }
    test_field_local_table();
    fn test_field_local_table_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_table_size) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(local_table_size)
            )
        );
    }
    test_field_local_table_size();
    fn test_field_local_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_size) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(local_size)
            )
        );
    }
    test_field_local_size();
    fn test_field_ic_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ic_entries) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(ic_entries)
            )
        );
    }
    test_field_ic_entries();
    fn test_field_ic_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ic_size) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(ic_size)
            )
        );
    }
    test_field_ic_size();
    fn test_field_callinfo_entries() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callinfo_entries) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(callinfo_entries)
            )
        );
    }
    test_field_callinfo_entries();
    fn test_field_callinfo_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).callinfo_size) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(callinfo_size)
            )
        );
    }
    test_field_callinfo_size();
    fn test_field_argc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(argc)
            )
        );
    }
    test_field_argc();
    fn test_field_arg_simple() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_simple) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_simple)
            )
        );
    }
    test_field_arg_simple();
    fn test_field_arg_rest() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_rest) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_rest)
            )
        );
    }
    test_field_arg_rest();
    fn test_field_arg_block() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_block) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_block)
            )
        );
    }
    test_field_arg_block();
    fn test_field_arg_opts() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_opts) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_opts)
            )
        );
    }
    test_field_arg_opts();
    fn test_field_arg_post_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_post_len) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_post_len)
            )
        );
    }
    test_field_arg_post_len();
    fn test_field_arg_post_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_post_start) as usize - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_post_start)
            )
        );
    }
    test_field_arg_post_start();
    fn test_field_arg_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_size) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_size)
            )
        );
    }
    test_field_arg_size();
    fn test_field_arg_opt_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_opt_table) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_opt_table)
            )
        );
    }
    test_field_arg_opt_table();
    fn test_field_arg_keyword() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_keyword) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_keyword)
            )
        );
    }
    test_field_arg_keyword();
    fn test_field_arg_keyword_check() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_keyword_check) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_keyword_check)
            )
        );
    }
    test_field_arg_keyword_check();
    fn test_field_arg_keywords() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_keywords) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_keywords)
            )
        );
    }
    test_field_arg_keywords();
    fn test_field_arg_keyword_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg_keyword_table) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(arg_keyword_table)
            )
        );
    }
    test_field_arg_keyword_table();
    fn test_field_stack_max() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack_max) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(stack_max)
            )
        );
    }
    test_field_stack_max();
    fn test_field_catch_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).catch_table) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(catch_table)
            )
        );
    }
    test_field_catch_table();
    fn test_field_catch_table_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).catch_table_size) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(catch_table_size)
            )
        );
    }
    test_field_catch_table_size();
    fn test_field_parent_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parent_iseq) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(parent_iseq)
            )
        );
    }
    test_field_parent_iseq();
    fn test_field_local_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_iseq) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(local_iseq)
            )
        );
    }
    test_field_local_iseq();
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_orig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).orig) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(orig)
            )
        );
    }
    test_field_orig();
    fn test_field_cref_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cref_stack) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(cref_stack)
            )
        );
    }
    test_field_cref_stack();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_defined_method_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).defined_method_id) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(defined_method_id)
            )
        );
    }
    test_field_defined_method_id();
    fn test_field_flip_cnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flip_cnt) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(flip_cnt)
            )
        );
    }
    test_field_flip_cnt();
    fn test_field_compile_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_iseq_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compile_data) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_iseq_struct),
                "::",
                stringify!(compile_data)
            )
        );
    }
    test_field_compile_data();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_objspace {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_hook_list_struct {
    pub hooks: *mut rb_event_hook_struct,
    pub events: rb_event_flag_t,
    pub need_clean: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_hook_list_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_hook_list_struct>(),
        24usize,
        concat!("Size of: ", stringify!(rb_hook_list_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_hook_list_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_hook_list_struct))
    );
    fn test_field_hooks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_hook_list_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hooks) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_hook_list_struct),
                "::",
                stringify!(hooks)
            )
        );
    }
    test_field_hooks();
    fn test_field_events() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_hook_list_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).events) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_hook_list_struct),
                "::",
                stringify!(events)
            )
        );
    }
    test_field_events();
    fn test_field_need_clean() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_hook_list_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).need_clean) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_hook_list_struct),
                "::",
                stringify!(need_clean)
            )
        );
    }
    test_field_need_clean();
}
pub type rb_hook_list_t = rb_hook_list_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_vm_struct {
    pub self_: VALUE,
    pub gvl: rb_global_vm_lock_t,
    pub thread_destruct_lock: rb_thread_lock_t,
    pub main_thread: *mut rb_thread_struct,
    pub running_thread: *mut rb_thread_struct,
    pub living_threads: *mut st_table,
    pub thgroup_default: VALUE,
    pub running: ::std::os::raw::c_int,
    pub thread_abort_on_exception: ::std::os::raw::c_int,
    pub trace_running: ::std::os::raw::c_int,
    pub sleeper: ::std::os::raw::c_int,
    pub mark_object_ary: VALUE,
    pub special_exceptions: [VALUE; 4usize],
    pub top_self: VALUE,
    pub load_path: VALUE,
    pub load_path_snapshot: VALUE,
    pub load_path_check_cache: VALUE,
    pub expanded_load_path: VALUE,
    pub loaded_features: VALUE,
    pub loaded_features_snapshot: VALUE,
    pub loaded_features_index: *mut st_table,
    pub loading_table: *mut st_table,
    pub trap_list: [rb_vm_struct__bindgen_ty_1; 65usize],
    pub event_hooks: rb_hook_list_t,
    pub src_encoding_index: ::std::os::raw::c_int,
    pub verbose: VALUE,
    pub debug: VALUE,
    pub progname: VALUE,
    pub coverages: VALUE,
    pub unlinked_method_entry_list: *mut unlinked_method_entry_list_entry,
    pub objspace: *mut rb_objspace,
    pub at_exit: RArray,
    pub defined_strings: *mut VALUE,
    pub default_params: rb_vm_struct__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_1 {
    pub cmd: VALUE,
    pub safe: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_vm_struct__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<rb_vm_struct__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(rb_vm_struct__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_vm_struct__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_vm_struct__bindgen_ty_1))
    );
    fn test_field_cmd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cmd) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_1),
                "::",
                stringify!(cmd)
            )
        );
    }
    test_field_cmd();
    fn test_field_safe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).safe) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_1),
                "::",
                stringify!(safe)
            )
        );
    }
    test_field_safe();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_struct__bindgen_ty_2 {
    pub thread_vm_stack_size: size_t,
    pub thread_machine_stack_size: size_t,
    pub fiber_vm_stack_size: size_t,
    pub fiber_machine_stack_size: size_t,
}
#[test]
fn bindgen_test_layout_rb_vm_struct__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<rb_vm_struct__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(rb_vm_struct__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_vm_struct__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_vm_struct__bindgen_ty_2))
    );
    fn test_field_thread_vm_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_vm_stack_size) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_2),
                "::",
                stringify!(thread_vm_stack_size)
            )
        );
    }
    test_field_thread_vm_stack_size();
    fn test_field_thread_machine_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_machine_stack_size) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_2),
                "::",
                stringify!(thread_machine_stack_size)
            )
        );
    }
    test_field_thread_machine_stack_size();
    fn test_field_fiber_vm_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fiber_vm_stack_size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_2),
                "::",
                stringify!(fiber_vm_stack_size)
            )
        );
    }
    test_field_fiber_vm_stack_size();
    fn test_field_fiber_machine_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct__bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fiber_machine_stack_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct__bindgen_ty_2),
                "::",
                stringify!(fiber_machine_stack_size)
            )
        );
    }
    test_field_fiber_machine_stack_size();
}
#[test]
fn bindgen_test_layout_rb_vm_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_vm_struct>(),
        1640usize,
        concat!("Size of: ", stringify!(rb_vm_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_vm_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_vm_struct))
    );
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_gvl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gvl) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(gvl)
            )
        );
    }
    test_field_gvl();
    fn test_field_thread_destruct_lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_destruct_lock) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(thread_destruct_lock)
            )
        );
    }
    test_field_thread_destruct_lock();
    fn test_field_main_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).main_thread) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(main_thread)
            )
        );
    }
    test_field_main_thread();
    fn test_field_running_thread() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).running_thread) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(running_thread)
            )
        );
    }
    test_field_running_thread();
    fn test_field_living_threads() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).living_threads) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(living_threads)
            )
        );
    }
    test_field_living_threads();
    fn test_field_thgroup_default() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thgroup_default) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(thgroup_default)
            )
        );
    }
    test_field_thgroup_default();
    fn test_field_running() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).running) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(running)
            )
        );
    }
    test_field_running();
    fn test_field_thread_abort_on_exception() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_abort_on_exception) as usize - ptr as usize
            },
            316usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(thread_abort_on_exception)
            )
        );
    }
    test_field_thread_abort_on_exception();
    fn test_field_trace_running() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trace_running) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(trace_running)
            )
        );
    }
    test_field_trace_running();
    fn test_field_sleeper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sleeper) as usize - ptr as usize
            },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(sleeper)
            )
        );
    }
    test_field_sleeper();
    fn test_field_mark_object_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mark_object_ary) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(mark_object_ary)
            )
        );
    }
    test_field_mark_object_ary();
    fn test_field_special_exceptions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).special_exceptions) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(special_exceptions)
            )
        );
    }
    test_field_special_exceptions();
    fn test_field_top_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top_self) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(top_self)
            )
        );
    }
    test_field_top_self();
    fn test_field_load_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load_path) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(load_path)
            )
        );
    }
    test_field_load_path();
    fn test_field_load_path_snapshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load_path_snapshot) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(load_path_snapshot)
            )
        );
    }
    test_field_load_path_snapshot();
    fn test_field_load_path_check_cache() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).load_path_check_cache) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(load_path_check_cache)
            )
        );
    }
    test_field_load_path_check_cache();
    fn test_field_expanded_load_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).expanded_load_path) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(expanded_load_path)
            )
        );
    }
    test_field_expanded_load_path();
    fn test_field_loaded_features() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loaded_features) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(loaded_features)
            )
        );
    }
    test_field_loaded_features();
    fn test_field_loaded_features_snapshot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loaded_features_snapshot) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(loaded_features_snapshot)
            )
        );
    }
    test_field_loaded_features_snapshot();
    fn test_field_loaded_features_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loaded_features_index) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(loaded_features_index)
            )
        );
    }
    test_field_loaded_features_index();
    fn test_field_loading_table() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loading_table) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(loading_table)
            )
        );
    }
    test_field_loading_table();
    fn test_field_trap_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trap_list) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(trap_list)
            )
        );
    }
    test_field_trap_list();
    fn test_field_event_hooks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event_hooks) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(event_hooks)
            )
        );
    }
    test_field_event_hooks();
    fn test_field_src_encoding_index() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).src_encoding_index) as usize - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(src_encoding_index)
            )
        );
    }
    test_field_src_encoding_index();
    fn test_field_verbose() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).verbose) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(verbose)
            )
        );
    }
    test_field_verbose();
    fn test_field_debug() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(debug)
            )
        );
    }
    test_field_debug();
    fn test_field_progname() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).progname) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(progname)
            )
        );
    }
    test_field_progname();
    fn test_field_coverages() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).coverages) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(coverages)
            )
        );
    }
    test_field_coverages();
    fn test_field_unlinked_method_entry_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unlinked_method_entry_list) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(unlinked_method_entry_list)
            )
        );
    }
    test_field_unlinked_method_entry_list();
    fn test_field_objspace() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objspace) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(objspace)
            )
        );
    }
    test_field_objspace();
    fn test_field_at_exit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).at_exit) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(at_exit)
            )
        );
    }
    test_field_at_exit();
    fn test_field_defined_strings() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).defined_strings) as usize - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(defined_strings)
            )
        );
    }
    test_field_defined_strings();
    fn test_field_default_params() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).default_params) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_struct),
                "::",
                stringify!(default_params)
            )
        );
    }
    test_field_default_params();
}
impl ::std::fmt::Debug for rb_vm_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_vm_struct {{ self: {:?}, gvl: {:?}, thread_destruct_lock: {:?}, main_thread: {:?}, running_thread: {:?}, living_threads: {:?}, thgroup_default: {:?}, running: {:?}, thread_abort_on_exception: {:?}, trace_running: {:?}, sleeper: {:?}, mark_object_ary: {:?}, special_exceptions: {:?}, top_self: {:?}, load_path: {:?}, load_path_snapshot: {:?}, load_path_check_cache: {:?}, expanded_load_path: {:?}, loaded_features: {:?}, loaded_features_snapshot: {:?}, loaded_features_index: {:?}, loading_table: {:?}, trap_list: {:?}, event_hooks: {:?}, src_encoding_index: {:?}, verbose: {:?}, debug: {:?}, progname: {:?}, coverages: {:?}, unlinked_method_entry_list: {:?}, objspace: {:?}, at_exit: {:?}, defined_strings: {:?}, default_params: {:?} }}" , self . self_ , self . gvl , self . thread_destruct_lock , self . main_thread , self . running_thread , self . living_threads , self . thgroup_default , self . running , self . thread_abort_on_exception , self . trace_running , self . sleeper , self . mark_object_ary , self . special_exceptions , self . top_self , self . load_path , self . load_path_snapshot , self . load_path_check_cache , self . expanded_load_path , self . loaded_features , self . loaded_features_snapshot , self . loaded_features_index , self . loading_table , self . trap_list , self . event_hooks , self . src_encoding_index , self . verbose , self . debug , self . progname , self . coverages , self . unlinked_method_entry_list , self . objspace , self . at_exit , self . defined_strings , self . default_params)
    }
}
pub type rb_vm_t = rb_vm_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_control_frame_struct {
    pub pc: *mut VALUE,
    pub sp: *mut VALUE,
    pub iseq: *mut rb_iseq_t,
    pub flag: VALUE,
    pub self_: VALUE,
    pub klass: VALUE,
    pub ep: *mut VALUE,
    pub block_iseq: *mut rb_iseq_t,
    pub proc_: VALUE,
    pub me: *const rb_method_entry_t,
}
#[test]
fn bindgen_test_layout_rb_control_frame_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_control_frame_struct>(),
        80usize,
        concat!("Size of: ", stringify!(rb_control_frame_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_control_frame_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_control_frame_struct))
    );
    fn test_field_pc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pc) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(pc)
            )
        );
    }
    test_field_pc();
    fn test_field_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(sp)
            )
        );
    }
    test_field_sp();
    fn test_field_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(iseq)
            )
        );
    }
    test_field_iseq();
    fn test_field_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flag) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(flag)
            )
        );
    }
    test_field_flag();
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_ep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ep) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(ep)
            )
        );
    }
    test_field_ep();
    fn test_field_block_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).block_iseq) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(block_iseq)
            )
        );
    }
    test_field_block_iseq();
    fn test_field_proc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(proc_)
            )
        );
    }
    test_field_proc();
    fn test_field_me() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_control_frame_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).me) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_control_frame_struct),
                "::",
                stringify!(me)
            )
        );
    }
    test_field_me();
}
pub type rb_control_frame_t = rb_control_frame_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_block_struct {
    pub self_: VALUE,
    pub klass: VALUE,
    pub ep: *mut VALUE,
    pub iseq: *mut rb_iseq_t,
    pub proc_: VALUE,
}
#[test]
fn bindgen_test_layout_rb_block_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_block_struct>(),
        40usize,
        concat!("Size of: ", stringify!(rb_block_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_block_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_block_struct))
    );
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_block_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_block_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_block_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_block_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_ep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_block_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ep) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_block_struct),
                "::",
                stringify!(ep)
            )
        );
    }
    test_field_ep();
    fn test_field_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_block_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_block_struct),
                "::",
                stringify!(iseq)
            )
        );
    }
    test_field_iseq();
    fn test_field_proc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_block_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).proc_) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_block_struct),
                "::",
                stringify!(proc_)
            )
        );
    }
    test_field_proc();
}
pub type rb_block_t = rb_block_struct;
pub const rb_thread_status_THREAD_RUNNABLE: rb_thread_status = 0;
pub const rb_thread_status_THREAD_STOPPED: rb_thread_status = 1;
pub const rb_thread_status_THREAD_STOPPED_FOREVER: rb_thread_status = 2;
pub const rb_thread_status_THREAD_KILLED: rb_thread_status = 3;
pub type rb_thread_status = ::std::os::raw::c_uint;
pub type rb_jmpbuf_t = jmp_buf;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_tag {
    pub tag: VALUE,
    pub retval: VALUE,
    pub buf: rb_jmpbuf_t,
    pub prev: *mut rb_vm_tag,
}
#[test]
fn bindgen_test_layout_rb_vm_tag() {
    assert_eq!(
        ::std::mem::size_of::<rb_vm_tag>(),
        224usize,
        concat!("Size of: ", stringify!(rb_vm_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_vm_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_vm_tag))
    );
    fn test_field_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_tag),
                "::",
                stringify!(tag)
            )
        );
    }
    test_field_tag();
    fn test_field_retval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).retval) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_tag),
                "::",
                stringify!(retval)
            )
        );
    }
    test_field_retval();
    fn test_field_buf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buf) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_tag),
                "::",
                stringify!(buf)
            )
        );
    }
    test_field_buf();
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_tag),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_vm_protect_tag {
    pub prev: *mut rb_vm_protect_tag,
}
#[test]
fn bindgen_test_layout_rb_vm_protect_tag() {
    assert_eq!(
        ::std::mem::size_of::<rb_vm_protect_tag>(),
        8usize,
        concat!("Size of: ", stringify!(rb_vm_protect_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_vm_protect_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_vm_protect_tag))
    );
    fn test_field_prev() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_vm_protect_tag>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).prev) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_vm_protect_tag),
                "::",
                stringify!(prev)
            )
        );
    }
    test_field_prev();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_unblock_callback {
    pub func: rb_unblock_function_t,
    pub arg: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_rb_unblock_callback() {
    assert_eq!(
        ::std::mem::size_of::<rb_unblock_callback>(),
        16usize,
        concat!("Size of: ", stringify!(rb_unblock_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_unblock_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_unblock_callback))
    );
    fn test_field_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_unblock_callback>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_unblock_callback),
                "::",
                stringify!(func)
            )
        );
    }
    test_field_func();
    fn test_field_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_unblock_callback>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).arg) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_unblock_callback),
                "::",
                stringify!(arg)
            )
        );
    }
    test_field_arg();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_mutex_struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_thread_list_struct {
    pub next: *mut rb_thread_list_struct,
    pub th: *mut rb_thread_struct,
}
#[test]
fn bindgen_test_layout_rb_thread_list_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_thread_list_struct>(),
        16usize,
        concat!("Size of: ", stringify!(rb_thread_list_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_thread_list_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_thread_list_struct))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_list_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_list_struct),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_th() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_list_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).th) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_list_struct),
                "::",
                stringify!(th)
            )
        );
    }
    test_field_th();
}
pub type rb_thread_list_t = rb_thread_list_struct;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct rb_thread_struct {
    pub self_: VALUE,
    pub vm: *mut rb_vm_t,
    pub stack: *mut VALUE,
    pub stack_size: size_t,
    pub cfp: *mut rb_control_frame_t,
    pub safe_level: ::std::os::raw::c_int,
    pub raised_flag: ::std::os::raw::c_int,
    pub last_status: VALUE,
    pub state: ::std::os::raw::c_int,
    pub waiting_fd: ::std::os::raw::c_int,
    pub passed_block: *const rb_block_t,
    pub passed_me: *const rb_method_entry_t,
    pub passed_ci: *mut rb_call_info_t,
    pub top_self: VALUE,
    pub top_wrapper: VALUE,
    pub base_block: *mut rb_block_t,
    pub root_lep: *mut VALUE,
    pub root_svar: VALUE,
    pub thread_id: rb_thread_id_t,
    pub status: rb_thread_status,
    pub to_kill: ::std::os::raw::c_int,
    pub priority: ::std::os::raw::c_int,
    pub native_thread_data: native_thread_data_t,
    pub blocking_region_buffer: *mut ::std::os::raw::c_void,
    pub thgroup: VALUE,
    pub value: VALUE,
    pub errinfo: VALUE,
    pub pending_interrupt_queue: VALUE,
    pub pending_interrupt_queue_checked: ::std::os::raw::c_int,
    pub pending_interrupt_mask_stack: VALUE,
    pub interrupt_flag: rb_atomic_t,
    pub interrupt_mask: ::std::os::raw::c_ulong,
    pub interrupt_lock: rb_thread_lock_t,
    pub unblock: rb_unblock_callback,
    pub locking_mutex: VALUE,
    pub keeping_mutexes: *mut rb_mutex_struct,
    pub tag: *mut rb_vm_tag,
    pub protect_tag: *mut rb_vm_protect_tag,
    pub parse_in_eval: ::std::os::raw::c_int,
    pub mild_compile_error: ::std::os::raw::c_int,
    pub local_storage: *mut st_table,
    pub join_list: *mut rb_thread_list_t,
    pub first_proc: VALUE,
    pub first_args: VALUE,
    pub first_func: ::std::option::Option<unsafe extern "C" fn() -> VALUE>,
    pub machine_stack_start: *mut VALUE,
    pub machine_stack_end: *mut VALUE,
    pub machine_stack_maxsize: size_t,
    pub machine_regs: jmp_buf,
    pub mark_stack_len: ::std::os::raw::c_int,
    pub stat_insn_usage: VALUE,
    pub event_hooks: rb_hook_list_t,
    pub trace_arg: *mut rb_trace_arg_struct,
    pub fiber: VALUE,
    pub root_fiber: VALUE,
    pub root_jmpbuf: rb_jmpbuf_t,
    pub method_missing_reason: ::std::os::raw::c_int,
    pub abort_on_exception: ::std::os::raw::c_int,
    pub altstack: *mut ::std::os::raw::c_void,
    pub running_time_us: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_rb_thread_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_thread_struct>(),
        936usize,
        concat!("Size of: ", stringify!(rb_thread_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_thread_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_thread_struct))
    );
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_vm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vm) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(vm)
            )
        );
    }
    test_field_vm();
    fn test_field_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(stack)
            )
        );
    }
    test_field_stack();
    fn test_field_stack_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(stack_size)
            )
        );
    }
    test_field_stack_size();
    fn test_field_cfp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfp) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(cfp)
            )
        );
    }
    test_field_cfp();
    fn test_field_safe_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).safe_level) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(safe_level)
            )
        );
    }
    test_field_safe_level();
    fn test_field_raised_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).raised_flag) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(raised_flag)
            )
        );
    }
    test_field_raised_flag();
    fn test_field_last_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_status) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(last_status)
            )
        );
    }
    test_field_last_status();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_waiting_fd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).waiting_fd) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(waiting_fd)
            )
        );
    }
    test_field_waiting_fd();
    fn test_field_passed_block() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).passed_block) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(passed_block)
            )
        );
    }
    test_field_passed_block();
    fn test_field_passed_me() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).passed_me) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(passed_me)
            )
        );
    }
    test_field_passed_me();
    fn test_field_passed_ci() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).passed_ci) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(passed_ci)
            )
        );
    }
    test_field_passed_ci();
    fn test_field_top_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top_self) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(top_self)
            )
        );
    }
    test_field_top_self();
    fn test_field_top_wrapper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).top_wrapper) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(top_wrapper)
            )
        );
    }
    test_field_top_wrapper();
    fn test_field_base_block() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).base_block) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(base_block)
            )
        );
    }
    test_field_base_block();
    fn test_field_root_lep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).root_lep) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(root_lep)
            )
        );
    }
    test_field_root_lep();
    fn test_field_root_svar() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).root_svar) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(root_svar)
            )
        );
    }
    test_field_root_svar();
    fn test_field_thread_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thread_id) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(thread_id)
            )
        );
    }
    test_field_thread_id();
    fn test_field_status() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(status)
            )
        );
    }
    test_field_status();
    fn test_field_to_kill() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).to_kill) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(to_kill)
            )
        );
    }
    test_field_to_kill();
    fn test_field_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(priority)
            )
        );
    }
    test_field_priority();
    fn test_field_native_thread_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).native_thread_data) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(native_thread_data)
            )
        );
    }
    test_field_native_thread_data();
    fn test_field_blocking_region_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).blocking_region_buffer) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(blocking_region_buffer)
            )
        );
    }
    test_field_blocking_region_buffer();
    fn test_field_thgroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thgroup) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(thgroup)
            )
        );
    }
    test_field_thgroup();
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_errinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).errinfo) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(errinfo)
            )
        );
    }
    test_field_errinfo();
    fn test_field_pending_interrupt_queue() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pending_interrupt_queue) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(pending_interrupt_queue)
            )
        );
    }
    test_field_pending_interrupt_queue();
    fn test_field_pending_interrupt_queue_checked() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pending_interrupt_queue_checked) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(pending_interrupt_queue_checked)
            )
        );
    }
    test_field_pending_interrupt_queue_checked();
    fn test_field_pending_interrupt_mask_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pending_interrupt_mask_stack) as usize - ptr as usize
            },
            264usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(pending_interrupt_mask_stack)
            )
        );
    }
    test_field_pending_interrupt_mask_stack();
    fn test_field_interrupt_flag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_flag) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(interrupt_flag)
            )
        );
    }
    test_field_interrupt_flag();
    fn test_field_interrupt_mask() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_mask) as usize - ptr as usize
            },
            280usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(interrupt_mask)
            )
        );
    }
    test_field_interrupt_mask();
    fn test_field_interrupt_lock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).interrupt_lock) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(interrupt_lock)
            )
        );
    }
    test_field_interrupt_lock();
    fn test_field_unblock() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).unblock) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(unblock)
            )
        );
    }
    test_field_unblock();
    fn test_field_locking_mutex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).locking_mutex) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(locking_mutex)
            )
        );
    }
    test_field_locking_mutex();
    fn test_field_keeping_mutexes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keeping_mutexes) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(keeping_mutexes)
            )
        );
    }
    test_field_keeping_mutexes();
    fn test_field_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(tag)
            )
        );
    }
    test_field_tag();
    fn test_field_protect_tag() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).protect_tag) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(protect_tag)
            )
        );
    }
    test_field_protect_tag();
    fn test_field_parse_in_eval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).parse_in_eval) as usize - ptr as usize
            },
            376usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(parse_in_eval)
            )
        );
    }
    test_field_parse_in_eval();
    fn test_field_mild_compile_error() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mild_compile_error) as usize - ptr as usize
            },
            380usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(mild_compile_error)
            )
        );
    }
    test_field_mild_compile_error();
    fn test_field_local_storage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).local_storage) as usize - ptr as usize
            },
            384usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(local_storage)
            )
        );
    }
    test_field_local_storage();
    fn test_field_join_list() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).join_list) as usize - ptr as usize
            },
            392usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(join_list)
            )
        );
    }
    test_field_join_list();
    fn test_field_first_proc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_proc) as usize - ptr as usize
            },
            400usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(first_proc)
            )
        );
    }
    test_field_first_proc();
    fn test_field_first_args() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_args) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(first_args)
            )
        );
    }
    test_field_first_args();
    fn test_field_first_func() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).first_func) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(first_func)
            )
        );
    }
    test_field_first_func();
    fn test_field_machine_stack_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_stack_start) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(machine_stack_start)
            )
        );
    }
    test_field_machine_stack_start();
    fn test_field_machine_stack_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_stack_end) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(machine_stack_end)
            )
        );
    }
    test_field_machine_stack_end();
    fn test_field_machine_stack_maxsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_stack_maxsize) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(machine_stack_maxsize)
            )
        );
    }
    test_field_machine_stack_maxsize();
    fn test_field_machine_regs() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).machine_regs) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(machine_regs)
            )
        );
    }
    test_field_machine_regs();
    fn test_field_mark_stack_len() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mark_stack_len) as usize - ptr as usize
            },
            648usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(mark_stack_len)
            )
        );
    }
    test_field_mark_stack_len();
    fn test_field_stat_insn_usage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stat_insn_usage) as usize - ptr as usize
            },
            656usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(stat_insn_usage)
            )
        );
    }
    test_field_stat_insn_usage();
    fn test_field_event_hooks() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event_hooks) as usize - ptr as usize
            },
            664usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(event_hooks)
            )
        );
    }
    test_field_event_hooks();
    fn test_field_trace_arg() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trace_arg) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(trace_arg)
            )
        );
    }
    test_field_trace_arg();
    fn test_field_fiber() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fiber) as usize - ptr as usize
            },
            696usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(fiber)
            )
        );
    }
    test_field_fiber();
    fn test_field_root_fiber() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).root_fiber) as usize - ptr as usize
            },
            704usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(root_fiber)
            )
        );
    }
    test_field_root_fiber();
    fn test_field_root_jmpbuf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).root_jmpbuf) as usize - ptr as usize
            },
            712usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(root_jmpbuf)
            )
        );
    }
    test_field_root_jmpbuf();
    fn test_field_method_missing_reason() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).method_missing_reason) as usize - ptr as usize
            },
            912usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(method_missing_reason)
            )
        );
    }
    test_field_method_missing_reason();
    fn test_field_abort_on_exception() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).abort_on_exception) as usize - ptr as usize
            },
            916usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(abort_on_exception)
            )
        );
    }
    test_field_abort_on_exception();
    fn test_field_altstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).altstack) as usize - ptr as usize
            },
            920usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(altstack)
            )
        );
    }
    test_field_altstack();
    fn test_field_running_time_us() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_thread_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).running_time_us) as usize - ptr as usize
            },
            928usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_thread_struct),
                "::",
                stringify!(running_time_us)
            )
        );
    }
    test_field_running_time_us();
}
impl ::std::fmt::Debug for rb_thread_struct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! (f , "rb_thread_struct {{ self: {:?}, vm: {:?}, stack: {:?}, stack_size: {:?}, cfp: {:?}, safe_level: {:?}, raised_flag: {:?}, last_status: {:?}, state: {:?}, waiting_fd: {:?}, passed_block: {:?}, passed_me: {:?}, passed_ci: {:?}, top_self: {:?}, top_wrapper: {:?}, base_block: {:?}, root_lep: {:?}, root_svar: {:?}, thread_id: {:?}, status: {:?}, to_kill: {:?}, priority: {:?}, native_thread_data: {:?}, blocking_region_buffer: {:?}, thgroup: {:?}, value: {:?}, errinfo: {:?}, pending_interrupt_queue: {:?}, pending_interrupt_queue_checked: {:?}, pending_interrupt_mask_stack: {:?}, interrupt_flag: {:?}, interrupt_mask: {:?}, interrupt_lock: {:?}, unblock: {:?}, locking_mutex: {:?}, keeping_mutexes: {:?}, tag: {:?}, protect_tag: {:?}, parse_in_eval: {:?}, mild_compile_error: {:?}, local_storage: {:?}, join_list: {:?}, first_proc: {:?}, first_args: {:?}, first_func: {:?}, machine_stack_start: {:?}, machine_stack_end: {:?}, machine_stack_maxsize: {:?}, machine_regs: {:?}, mark_stack_len: {:?}, stat_insn_usage: {:?}, event_hooks: {:?}, trace_arg: {:?}, fiber: {:?}, root_fiber: {:?}, root_jmpbuf: {:?}, method_missing_reason: {:?}, abort_on_exception: {:?}, altstack: {:?}, running_time_us: {:?} }}" , self . self_ , self . vm , self . stack , self . stack_size , self . cfp , self . safe_level , self . raised_flag , self . last_status , self . state , self . waiting_fd , self . passed_block , self . passed_me , self . passed_ci , self . top_self , self . top_wrapper , self . base_block , self . root_lep , self . root_svar , self . thread_id , self . status , self . to_kill , self . priority , self . native_thread_data , self . blocking_region_buffer , self . thgroup , self . value , self . errinfo , self . pending_interrupt_queue , self . pending_interrupt_queue_checked , self . pending_interrupt_mask_stack , self . interrupt_flag , self . interrupt_mask , self . interrupt_lock , self . unblock , self . locking_mutex , self . keeping_mutexes , self . tag , self . protect_tag , self . parse_in_eval , self . mild_compile_error , self . local_storage , self . join_list , self . first_proc , self . first_args , self . first_func , self . machine_stack_start , self . machine_stack_end , self . machine_stack_maxsize , self . machine_regs , self . mark_stack_len , self . stat_insn_usage , self . event_hooks , self . trace_arg , self . fiber , self . root_fiber , self . root_jmpbuf , self . method_missing_reason , self . abort_on_exception , self . altstack , self . running_time_us)
    }
}
pub type rb_thread_t = rb_thread_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_trace_arg_struct {
    pub event: rb_event_flag_t,
    pub th: *mut rb_thread_t,
    pub cfp: *mut rb_control_frame_t,
    pub self_: VALUE,
    pub id: ID,
    pub klass: VALUE,
    pub data: VALUE,
    pub klass_solved: ::std::os::raw::c_int,
    pub lineno: ::std::os::raw::c_int,
    pub path: VALUE,
}
#[test]
fn bindgen_test_layout_rb_trace_arg_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_trace_arg_struct>(),
        72usize,
        concat!("Size of: ", stringify!(rb_trace_arg_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_trace_arg_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(rb_trace_arg_struct))
    );
    fn test_field_event() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).event) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(event)
            )
        );
    }
    test_field_event();
    fn test_field_th() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).th) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(th)
            )
        );
    }
    test_field_th();
    fn test_field_cfp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfp) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(cfp)
            )
        );
    }
    test_field_cfp();
    fn test_field_self() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).self_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(self_)
            )
        );
    }
    test_field_self();
    fn test_field_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(id)
            )
        );
    }
    test_field_id();
    fn test_field_klass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(klass)
            )
        );
    }
    test_field_klass();
    fn test_field_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(data)
            )
        );
    }
    test_field_data();
    fn test_field_klass_solved() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).klass_solved) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(klass_solved)
            )
        );
    }
    test_field_klass_solved();
    fn test_field_lineno() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lineno) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(lineno)
            )
        );
    }
    test_field_lineno();
    fn test_field_path() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_trace_arg_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_trace_arg_struct),
                "::",
                stringify!(path)
            )
        );
    }
    test_field_path();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_compile_option_struct {
    pub inline_const_cache: ::std::os::raw::c_int,
    pub peephole_optimization: ::std::os::raw::c_int,
    pub tailcall_optimization: ::std::os::raw::c_int,
    pub specialized_instruction: ::std::os::raw::c_int,
    pub operands_unification: ::std::os::raw::c_int,
    pub instructions_unification: ::std::os::raw::c_int,
    pub stack_caching: ::std::os::raw::c_int,
    pub trace_instruction: ::std::os::raw::c_int,
    pub debug_level: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rb_compile_option_struct() {
    assert_eq!(
        ::std::mem::size_of::<rb_compile_option_struct>(),
        36usize,
        concat!("Size of: ", stringify!(rb_compile_option_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<rb_compile_option_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(rb_compile_option_struct))
    );
    fn test_field_inline_const_cache() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inline_const_cache) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(inline_const_cache)
            )
        );
    }
    test_field_inline_const_cache();
    fn test_field_peephole_optimization() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).peephole_optimization) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(peephole_optimization)
            )
        );
    }
    test_field_peephole_optimization();
    fn test_field_tailcall_optimization() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tailcall_optimization) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(tailcall_optimization)
            )
        );
    }
    test_field_tailcall_optimization();
    fn test_field_specialized_instruction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specialized_instruction) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(specialized_instruction)
            )
        );
    }
    test_field_specialized_instruction();
    fn test_field_operands_unification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).operands_unification) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(operands_unification)
            )
        );
    }
    test_field_operands_unification();
    fn test_field_instructions_unification() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).instructions_unification) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(instructions_unification)
            )
        );
    }
    test_field_instructions_unification();
    fn test_field_stack_caching() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack_caching) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(stack_caching)
            )
        );
    }
    test_field_stack_caching();
    fn test_field_trace_instruction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trace_instruction) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(trace_instruction)
            )
        );
    }
    test_field_trace_instruction();
    fn test_field_debug_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<rb_compile_option_struct>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).debug_level) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(rb_compile_option_struct),
                "::",
                stringify!(debug_level)
            )
        );
    }
    test_field_debug_level();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_line_info_entry {
    pub position: ::std::os::raw::c_uint,
    pub line_no: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_iseq_line_info_entry() {
    assert_eq!(
        ::std::mem::size_of::<iseq_line_info_entry>(),
        8usize,
        concat!("Size of: ", stringify!(iseq_line_info_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_line_info_entry>(),
        4usize,
        concat!("Alignment of ", stringify!(iseq_line_info_entry))
    );
    fn test_field_position() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_line_info_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_line_info_entry),
                "::",
                stringify!(position)
            )
        );
    }
    test_field_position();
    fn test_field_line_no() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_line_info_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).line_no) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_line_info_entry),
                "::",
                stringify!(line_no)
            )
        );
    }
    test_field_line_no();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_catch_table_entry {
    pub type_: iseq_catch_table_entry_catch_type,
    pub iseq: VALUE,
    pub start: ::std::os::raw::c_ulong,
    pub end: ::std::os::raw::c_ulong,
    pub cont: ::std::os::raw::c_ulong,
    pub sp: ::std::os::raw::c_ulong,
}
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_RESCUE: iseq_catch_table_entry_catch_type =
    3;
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_ENSURE: iseq_catch_table_entry_catch_type =
    5;
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_RETRY: iseq_catch_table_entry_catch_type = 7;
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_BREAK: iseq_catch_table_entry_catch_type = 9;
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_REDO: iseq_catch_table_entry_catch_type = 11;
pub const iseq_catch_table_entry_catch_type_CATCH_TYPE_NEXT: iseq_catch_table_entry_catch_type = 13;
pub type iseq_catch_table_entry_catch_type = ::std::os::raw::c_uint;
#[test]
fn bindgen_test_layout_iseq_catch_table_entry() {
    assert_eq!(
        ::std::mem::size_of::<iseq_catch_table_entry>(),
        48usize,
        concat!("Size of: ", stringify!(iseq_catch_table_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_catch_table_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(iseq_catch_table_entry))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iseq) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(iseq)
            )
        );
    }
    test_field_iseq();
    fn test_field_start() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(start)
            )
        );
    }
    test_field_start();
    fn test_field_end() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(end)
            )
        );
    }
    test_field_end();
    fn test_field_cont() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cont) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(cont)
            )
        );
    }
    test_field_cont();
    fn test_field_sp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_catch_table_entry>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sp) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_catch_table_entry),
                "::",
                stringify!(sp)
            )
        );
    }
    test_field_sp();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data_storage {
    pub next: *mut iseq_compile_data_storage,
    pub pos: ::std::os::raw::c_ulong,
    pub size: ::std::os::raw::c_ulong,
    pub buff: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_iseq_compile_data_storage() {
    assert_eq!(
        ::std::mem::size_of::<iseq_compile_data_storage>(),
        32usize,
        concat!("Size of: ", stringify!(iseq_compile_data_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_compile_data_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(iseq_compile_data_storage))
    );
    fn test_field_next() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data_storage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data_storage),
                "::",
                stringify!(next)
            )
        );
    }
    test_field_next();
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data_storage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data_storage),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data_storage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data_storage),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_buff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data_storage>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buff) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data_storage),
                "::",
                stringify!(buff)
            )
        );
    }
    test_field_buff();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_compile_data {
    pub err_info: VALUE,
    pub mark_ary: VALUE,
    pub catch_table_ary: VALUE,
    pub start_label: *mut iseq_label_data,
    pub end_label: *mut iseq_label_data,
    pub redo_label: *mut iseq_label_data,
    pub current_block: VALUE,
    pub ensure_node: VALUE,
    pub for_iseq: VALUE,
    pub ensure_node_stack: *mut iseq_compile_data_ensure_node_stack,
    pub loopval_popped: ::std::os::raw::c_int,
    pub cached_const: ::std::os::raw::c_int,
    pub storage_head: *mut iseq_compile_data_storage,
    pub storage_current: *mut iseq_compile_data_storage,
    pub last_line: ::std::os::raw::c_int,
    pub last_coverable_line: ::std::os::raw::c_int,
    pub label_no: ::std::os::raw::c_int,
    pub node_level: ::std::os::raw::c_int,
    pub option: *const rb_compile_option_t,
}
#[test]
fn bindgen_test_layout_iseq_compile_data() {
    assert_eq!(
        ::std::mem::size_of::<iseq_compile_data>(),
        128usize,
        concat!("Size of: ", stringify!(iseq_compile_data))
    );
    assert_eq!(
        ::std::mem::align_of::<iseq_compile_data>(),
        8usize,
        concat!("Alignment of ", stringify!(iseq_compile_data))
    );
    fn test_field_err_info() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).err_info) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(err_info)
            )
        );
    }
    test_field_err_info();
    fn test_field_mark_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mark_ary) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(mark_ary)
            )
        );
    }
    test_field_mark_ary();
    fn test_field_catch_table_ary() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).catch_table_ary) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(catch_table_ary)
            )
        );
    }
    test_field_catch_table_ary();
    fn test_field_start_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_label) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(start_label)
            )
        );
    }
    test_field_start_label();
    fn test_field_end_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).end_label) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(end_label)
            )
        );
    }
    test_field_end_label();
    fn test_field_redo_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).redo_label) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(redo_label)
            )
        );
    }
    test_field_redo_label();
    fn test_field_current_block() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).current_block) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(current_block)
            )
        );
    }
    test_field_current_block();
    fn test_field_ensure_node() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ensure_node) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(ensure_node)
            )
        );
    }
    test_field_ensure_node();
    fn test_field_for_iseq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).for_iseq) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(for_iseq)
            )
        );
    }
    test_field_for_iseq();
    fn test_field_ensure_node_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ensure_node_stack) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(ensure_node_stack)
            )
        );
    }
    test_field_ensure_node_stack();
    fn test_field_loopval_popped() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).loopval_popped) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(loopval_popped)
            )
        );
    }
    test_field_loopval_popped();
    fn test_field_cached_const() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cached_const) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(cached_const)
            )
        );
    }
    test_field_cached_const();
    fn test_field_storage_head() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage_head) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(storage_head)
            )
        );
    }
    test_field_storage_head();
    fn test_field_storage_current() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).storage_current) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(storage_current)
            )
        );
    }
    test_field_storage_current();
    fn test_field_last_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_line) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(last_line)
            )
        );
    }
    test_field_last_line();
    fn test_field_last_coverable_line() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).last_coverable_line) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(last_coverable_line)
            )
        );
    }
    test_field_last_coverable_line();
    fn test_field_label_no() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label_no) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(label_no)
            )
        );
    }
    test_field_label_no();
    fn test_field_node_level() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).node_level) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(node_level)
            )
        );
    }
    test_field_node_level();
    fn test_field_option() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<iseq_compile_data>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).option) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(iseq_compile_data),
                "::",
                stringify!(option)
            )
        );
    }
    test_field_option();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_table_entry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_packed_entry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rb_event_hook_struct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iseq_label_data {
    pub _address: u8,
}
